name: Test and report coverage

on: [push]

jobs:
  testreport:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]  # -e/editable is important for coverage to work
      - name: Create doc tests
        run: |
          mkdir tests/autogen_phmdoctest
          phmdoctest README.md --outfile tests/autogen_phmdoctest/test_readme.py
      - name: Test with pytest and coverage.py
        run: |
          mkdir -p test_coverage_result/${{ matrix.python-version }}
          coverage run --branch -m pytest \
            | tee ${{ runner.temp }}/pytest_log.txt
          python -c \
            "import sys; \
            data = sys.stdin.readlines()[-1].replace(',', '').split(); \
            data={k.upper():int(data[data.index(k)-1]) \
              if k in data else 0 for k in ['passed','failed']}; \
            print(data)" \
          < ${{ runner.temp }}/pytest_log.txt \
          > test_coverage_result/${{ matrix.python-version }}/test_results.txt
      - name: Report coverage
        run: |
          coverage report \
            | tee ${{ runner.temp }}/coverage_report.txt
          python -c \
            "import sys; \
            coverage = sys.stdin.readlines()[-1].split()[-1]; \
            print(coverage)" \
          < ${{ runner.temp }}/coverage_report.txt \
          > test_coverage_result/${{ matrix.python-version }}/coverage_result.txt
      - name: Upload test and coverage result
        uses: actions/upload-artifact@v3
        with:
          name: test_coverage_result
          path: test_coverage_result

  badge_creation:
    runs-on: ubuntu-latest
    needs: testreport

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: actions/download-artifact@v3
      - name: Aggregate test results
        run: python .github/workflows/aggregate_test_coverage_results.py test_coverage_result >> $GITHUB_ENV
      - name: Create Test Badge
        uses: schneegans/dynamic-badges-action@v1.4.0
        with:
          auth: ${{ secrets.DYNAMICBADGE_GISTSECRET }}
          gistID: 7e5c41da825c828d7db05e41cdaf5bc2
          filename: test_badge.json
          label: tests
          message: ${{ env.TESTS_PASSED }} passed, ${{ env.TESTS_FAILED }} failed
          color: ${{ env.TESTS_COLOR }}
      - name: Create Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.4.0
        with:
          auth: ${{ secrets.DYNAMICBADGE_GISTSECRET }}
          gistID: 7e5c41da825c828d7db05e41cdaf5bc2
          filename: coverage_badge.json
          label: coverage
          message: ${{ env.COVERAGE }}%
          valColorRange: ${{ env.COVERAGE }}
          maxColorRange: 100
          minColorRange: 0
      - name: Check all tests completed
        if: env.TESTS_FAILED != 0
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('Some tests failed!')
